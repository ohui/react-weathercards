{"version":3,"sources":["components/WeatherCard/Location.js","components/WeatherCard/Condition.js","components/WeatherCard/Icon.js","components/WeatherCard/component.js","components/WeatherEngine.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","country","Container","styled","div","City","h1","Country","h3","Condition","temp","condition","Temp","Icon","img","UpperDiv","icon","src","alt","WeatherCard","Card","bg","style","background","WeatherEngine","prop","location","useState","query","setQuery","error","setError","loading","setLoading","weather","setWeather","getWeather","q","a","fetch","apiRes","json","resJSON","main","name","sys","useEffect","textAlign","margin","TextField","inputProps","padding","color","value","onChange","e","target","onKeyPress","ev","key","preventDefault","variant","Button","marginTop","backgroundColor","size","onClick","handleSearch","App","Grid","container","direction","item","xs","sm","md","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2dd05e08.chunk.js","sourcesContent":["import React from 'react';\n\nimport styled from '@emotion/styled';\n\nconst Location = ({city, country}) => {\n\n    // The Location component is responsible for styling \n    // it's children component (City and Country). \n    // we can pass values to these stylings. \n\n    const Container = styled.div`\n        text-align: center;\n    `\n\n    const City = styled.h1`\n        font-family: Merriweather, sans-serif;\n        font-size: 1.6em; \n    `\n\n    const Country = styled.h3`\n        font-size:1.1rem; \n    `\n\n    return ( \n        <Container>\n                <City>{city}</City>\n                <Country>{country}</Country>\n        </Container>\n     );\n};\n \nexport default Location;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nconst Condition = ({temp, condition}) => {\n\n    const Temp = styled.h1`\n        font-size: 2rem;\n        font-weight:200;\n    `\n    const Condition = styled.h3`\n        font-family: Merriweather, sans-serif;\n    `\n\n    return ( \n        <>\n        <Temp> {temp} Â°F</Temp>\n        <Condition>{condition}</Condition>\n        </>\n     );\n}\n \nexport default Condition;","import React from 'react';\n\nimport styled from '@emotion/styled';\n\n//\nconst Icon = ({ condition}) => {\n\n    const Icon = styled.img`\n        height: 100%;\n    `;\n\n    const UpperDiv = styled.div`\n        height:50px;\n    `;\n\n    var icon = '';\n\n    switch (condition) {\n        case \"Clouds\":\n          icon = `./images/Mostly Cloudy-2x.png`;\n          break;\n        case \"Clear\":\n          icon = `./images/Mostly Sunny-2x.png`;\n          break;\n        case \"Haze\":\n          icon = `./images/Haze-2x.png`;\n          break;\n        case \"Hail\":\n          icon = `./images/Hail-2x.png`;\n          break;\n        case \"Fog\":\n          icon = `./images/Fog-2x.png`;\n          break;\n        case \"Tornado\":\n          icon = `./images/Tornado-2x.png`;\n          break;\n        case \"Dust\":\n          icon = `./images/Dust-2x.png`;\n          break;\n        case \"Mist\":\n          icon = `./images/Fog-2x.png`;\n          break;\n        case \"Snow\":\n          icon = `./images/Snow-2x.png`;\n          break;\n        case \"Rain\":\n          icon = `./images/Rain-2x.png`;\n          break;\n        case \"Drizzle\":\n          icon = `./images/Drizzle-2x.png`;\n          break;\n        case \"Thunderstorm\":\n          icon = `./images/Severe Thunderstorm-2x.png`;\n          break;\n        default:\n          icon = `./images/Fog-2x.png`;\n          break;\n      }\n\n    return ( <UpperDiv><Icon  src = {icon} alt = {condition}></Icon></UpperDiv> );\n}\n \nexport default Icon;","import React from 'react';\n\nimport styled from '@emotion/styled';\nimport Location from './Location';\nimport Condition from './Condition';\nimport Icon from './Icon';\n\n\nconst WeatherCard = ({temp, condition, city, country}) => {\n\n    // The responsibility of the Weather card is to keep the style\n    // display this css style. Later it'll be responsible for \n    // passing the prop. \n\n    const Card = styled.div`\n    margin: 0 auto; \n    background: gray;\n    width: 200px;\n    height: 240px;\n    display: flex;\n    flex-direction: column;\n    justify-content: space-around;\n    border-radius: 15px;\n    align-items: center; \n    color:white;\n    padding:35px 0`\n\n    if (temp == null){\n        return (\n            <Card>\n           <h2>{condition} </h2>\n        </Card>\n        );\n    }\n\n    let bg = null; \n\n    if (temp >=50 ){\n        bg = `linear-gradient(to top, rgb( 255, 50, 0), rgb( 255, 200 , 0))`;\n    } else if (  temp < 50){\n        bg = `linear-gradient(to top, rgb( 0, 50, 255 ), rgb( 0, 150 , 255))`;\n    }\n\n    return (  \n        <Card style = {{ background: bg  }}>\n            <Location city = {city} country = {country}/>\n            <Icon condition = {condition}/>\n            <Condition temp = {temp} condition = {condition} />\n        </Card>\n    );\n}\n \nexport default WeatherCard;","import React, {useState, useEffect} from \"react\"; \n\nimport WeatherCard from \"./WeatherCard/component\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\n\nconst WeatherEngine = (prop) => {\n    const location = prop.city;\n\n  const [query, setQuery] = useState(location);\n  const [error, setError] = useState (false);\n  const [loading, setLoading] = useState(false);\n  const[weather, setWeather] = useState ({\n    temp: null, \n    city: null, \n    condition: null, \n    country: null\n  });\n\n  const getWeather = async(q) => {\n    setLoading(true);\n    try{\n        const apiRes = await fetch (`https://api.openweathermap.org/data/2.5/weather?q=${q}&units=imperial&APPID=e18018708f1569775aaeac775323fc70`);\n        const resJSON = await apiRes.json(); \n        setWeather({\n          temp: resJSON.main.temp, \n          city: resJSON.name, \n          condition: resJSON.weather[0].main, \n          country: resJSON.sys.country\n        });\n    } catch (error){\n        setError(true);\n    }\n    setLoading(false);\n  }\n\n  const handleSearch = (e) => {\n    e.preventDefault(); //prevent whatever button click was going to do . \n    getWeather(query);\n  };\n\n  useEffect(() => {\n    getWeather(location);\n  }, [location]);\n  \n  return (\n    <div style ={{ textAlign:\"center\" }}>\n      {!loading && !error ? (<div><WeatherCard temp = {weather.temp} condition = {weather.condition} city = {weather.city} country = {weather.country}/>\n       </div>\n      ): loading? (\n      <div><WeatherCard temp = {null} condition = {\"Loading\"} /> </div>\n      \n      ): !loading && error? (\n        <div><WeatherCard temp = {null} condition = {\"Invalid City\"} /> </div>\n      \n      )\n      :null}\n\n      <form style = {{margin:'5px'}}>\n        \n        <TextField inputProps={{ style: {textAlign: 'center', padding:'5px',  color:'white' } }}  value = {query} onChange = {(e) => {setQuery(e.target.value); }}  onKeyPress={(ev) => {\n    if (ev.key === 'Enter') {\n      getWeather(ev.target.value);\n      ev.preventDefault();\n    }}} variant=\"filled\" /> \n    <br/>\n\n        <Button style = {{marginTop: '5px', backgroundColor: 'white' }} size=\"small\"  onClick = {e => handleSearch(e)}  variant=\"outlined\" color=\"primary\">Search</Button>\n      </form>\n    </div>\n  );\n};\n \nexport default WeatherEngine;","import React  from 'react';\nimport {Grid} from '@material-ui/core';\nimport WeatherEngine from './components/WeatherEngine';\nimport styled from '@emotion/styled'\n\nconst Condition = styled.h3`\npadding:30px 0 0 0;\nfont-family: Merriweather, sans-serif;\ncolor: white;\nfont-size:2.5em; \n`\nfunction App() {  \n  return (\n<Grid container direction = \"column\" style = {{background: `linear-gradient(to right, #3988d4, #1dcfd9)`}}>    \n  \n    <Grid style = {{textAlign:\"center\" }}>\n      <Condition> Simple Weather Card Dashboard</Condition>\n        </Grid>\n    \n      <Grid item container style = {{ padding: \"10px 0px 40px 0\",  }} >\n      \n      <Grid item xs = {12} sm ={6} md = {3}>\n        <WeatherEngine city=\"Hawaii,US\" />\n        </Grid>\n\n        <Grid item xs = {12} sm ={6} md = {3}>\n        <WeatherEngine city=\"Los Angeles,US\" />\n        </Grid>\n\n        <Grid item xs = {12} sm ={6} md = {3}>\n        <WeatherEngine city=\"Chicago,US\" />\n        </Grid>\n\n        <Grid item xs = {12} sm ={6} md = {3}>\n        <WeatherEngine city=\"New York,US\" />\n        </Grid>\n    </Grid>\n\n    {/* <Grid item container >\n      <Grid item xs = {12}>\n      <Paper elevation={3} >\n        <h2>Hello there!</h2>\n        <h3> Welcome to my first React project that I coded from two YouTube tutorials. This app allows you to simply enter city names under each weather card to get their weather conditions. If the temperature is 50 or over, use the orange-red gradient, else use the blue gradient background. I use the OpenWeather API  (limit: 1,000 API calls / day) to get the weather data. It's really cool how you don't need to re-render the entire page when one card is changed.  </h3>\n        </Paper>\n      </Grid>\n    </Grid> */}\n\n  </Grid>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}